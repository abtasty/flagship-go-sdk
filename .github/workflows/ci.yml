name: CI pipeline
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:
  build:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.13"
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run tests
        run: go test ./pkg/... -coverprofile cover.out.tmp
      - name: Removes mocks from tests
        run: cat cover.out.tmp | grep -v "_mock.go" > cover.out
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.31
          args: --skip-files .*_test.go
      - uses: codecov/codecov-action@v1
        with:
          file: ./cover.out
      - name: Update codecov
        run: bash <(curl -s https://codecov.io/bash)

  # build_image:
  #   runs-on: ubuntu-latest
  #   env:
  #     REGISTRY_DOMAIN: docker.pkg.github.com
  #   steps:
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - run: echo "action_state=yellow" >> $GITHUB_ENV
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ env.REGISTRY_DOMAIN }}
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.CR_PAT }}
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
  #       id: extract_branch
  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: ${{ env.REGISTRY_DOMAIN }}/${{ github.repository }}/qa:${{ steps.extract_branch.outputs.branch }}
  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}
